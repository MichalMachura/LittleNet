

module LittleNetAcc 
    (
    input clk,
    input reset,
    
    input [31:0] s_axis_tdata,
    input [3:0] s_axis_tkeep,
    input s_axis_tlast,
    input s_axis_tvalid,
    output s_axis_tready,
    
    output [31:0] m_axis_tdata,
    output [3:0] m_axis_tkeep,
    output m_axis_tlast,
    output m_axis_tvalid,
    input m_axis_tready
    );

(* KEEP = "TRUE" *)
reg [3:0] state = 4'd13;

wire enable[{{ layers|len }}];
wire rst[{{ layers|len }}];
wire finished[{{ layers|len }}];
wire sleep[{{ layers|len }}];
wire [7:0] data_read[{{ layers|len }}];
wire [31:0] data_read_address[{{ layers|len }}];
wire data_read_en[{{ layers|len }}];
wire [31:0] data_write[{{ layers|len }}];
wire [31:0] data_write_address[{{ layers|len }}];
wire data_write_we[{{ layers|len }}];

{% set sleep_off = "distributed" -%}
{% set rom_latency = 8 -%}

{% for i, L in layers | enumerate %}
    {% if L["type"] == "InputLayer" -%}
    InputLayer
		#(
		.BIT_WIDTH({{ L["bit_width"] }}),
		.WIDTH({{ L["width"] }}),
		.HEIGHT({{ L["height"] }}),
		.CHANNELS({{ L["channels"] }}),
		.GROUPS({{ L["groups"] }}),
		.WRITE_MEMORY_LATENCY({{write_latency}})
		)
		{{L["name"]}}
		(
		.clk(clk),
		.enable(enable[{{i}}]),
		.reset(rst[{{i}}]),
        .axis_tdata(s_axis_tdata),
        .axis_tkeep(s_axis_tkeep),
        .axis_tlast(s_axis_tlast),
        .axis_tvalid(s_axis_tvalid),
        .axis_tready(s_axis_tready),        
        .data_out(data_write[{{i}}]),
		.data_out_address(data_write_address[{{i}}]),
		.data_out_validity(data_write_we[{{i}}]),
		.finished(finished[{{i}}])
		);
    assign data_read_en[{{i}}] = 1'b0;
    assign data_read_address[{{i}}] = 32'd0;
    assign data_read[{{i}}] = 8'd0;
    
    {% elif L["type"] == "OutputLayer" -%}
    OutputLayer
		#(
		.SIZE({{L['size']}}),
        .READ_LATENCY({{read_latency}})
		)
		{{L["name"]}}
	    (
        .clk(clk),
        .enable(enable[{{i}}]),
        .reset(rst[{{i}}]),
        .finished(finished[{{i}}]),
        .in_data_memory_out(data_read[{{i}}]),
        .in_data_memory_address(data_read_address[{{i}}]),
        .in_data_memory_read_enable(data_read_en[{{i}}]),
        .axis_tdata(m_axis_tdata),
        .axis_tkeep(m_axis_tkeep),
        .axis_tlast(m_axis_tlast),
        .axis_tvalid(m_axis_tvalid),
        .axis_tready(m_axis_tready)
        );
    assign data_write[{{i}}] = 32'd0;
    assign data_write_address[{{i}}] = 32'd0;
    assign data_write_we[{{i}}] = 1'b0;
    
    {% elif L["type"] == "MaxFinder" -%}
    MaxFinderUnit
		#(
		.WIDTH({{L['width']}}),
		.HEIGHT({{L['height']}}),
		.CHANNELS({{L['ch_in']}}),
		.BIT_WIDTH({{L['bit_width']}}),
		.SIGNED({{L['signed']|int}}),
        .READ_LATENCY({{read_latency}}),
        .WRITE_LATENCY({{write_latency}})
		)
		{{L["name"]}}
	    (
        .clk(clk),
        .enable(enable[{{i}}]),
        .reset(rst[{{i}}]),
        .finished(finished[{{i}}]),
        .in_data_memory_out(data_read[{{i}}]),
        .in_data_memory_address(data_read_address[{{i}}]),
        .in_data_memory_read_enable(data_read_en[{{i}}]),
        .out_data_memory_in(data_write[{{i}}]),
		.out_data_memory_address(data_write_address[{{i}}]),
		.out_data_memory_write_enable(data_write_we[{{i}}])
		);    
    {% elif L["type"] == "PWConv2d" -%}
    wire [{{L['parallelism']}}*{{L['weight_bw']}}-1:0] data_weight_{{i}};
    wire [31:0] data_weight_address_{{i}};
    wire data_weight_en_{{i}};
    
    PointwiseConv2dUnit#(
        .IN_WIDTH({{L["width"]}}),
        .IN_HEIGHT({{L["height"]}}),
        .IN_CHANNELS({{L["ch_in"]}}),
        .OUT_CHANNELS({{L["ch_out"]}}),
        .USE_BIAS({{L["use_bias"]}}),
        .USE_BN({{L["use_bn"]}}),
        .USE_RELU({{L["use_relu"]}}),
        .USE_MAXPOOL({{L["use_mp"]}}),
        .USE_MAXPOOL_CEIL_MODE({{L["ceil_mode"]}}),
        .PARALLELISM({{L["parallelism"]}}),
        .GROUPS({{L["groups"]}}),
        .IN_DATA_BIT_WIDTH({{L["in_bw"]}}),
        .IN_DATA_INT_WIDTH({{L["in_int"]}}),
        .IN_DATA_SIGN({{L["in_s"]}}),
        .WEIGHT_DATA_BIT_WIDTH({{L["weight_bw"]}}),
        .WEIGHT_DATA_INT_WIDTH({{L["weight_int"]}}),
        .WEIGHT_DATA_SIGN({{L["weight_s"]}}),
        .BIAS_DATA_BIT_WIDTH({{L["bias_bw"]}}),
        .BIAS_DATA_INT_WIDTH({{L["bias_int"]}}),
        .BIAS_DATA_SIGN({{L["bias_s"]}}),
        .INTER_DATA_BIT_WIDTH({{L["inter_bw"]}}),
        .INTER_DATA_INT_WIDTH({{L["inter_int"]}}),
        .INTER_DATA_SIGN({{L["inter_s"]}}),
        .BN_W_DATA_BIT_WIDTH({{L["bn_weight_bw"]}}),
        .BN_W_DATA_INT_WIDTH({{L["bn_weight_int"]}}),
        .BN_W_DATA_SIGN({{L["bn_weight_s"]}}),
        .BN_B_DATA_BIT_WIDTH({{L["bn_bias_bw"]}}),
        .BN_B_DATA_INT_WIDTH({{L["bn_bias_int"]}}),
        .BN_B_DATA_SIGN({{L["bn_bias_s"]}}),
        .OUT_DATA_BIT_WIDTH({{L["out_bw"]}}),
        .OUT_DATA_INT_WIDTH({{L["out_int"]}}),
        .OUT_DATA_SIGN({{L["out_s"]}}),
        .READ_MEMORY_LATENCY({{read_latency}}),
        .READ_WEIGHT_MEMORY_LATENCY({{rom_latency}}),
        .WRITE_MEMORY_LATENCY({{write_latency}})
        )
        {{L['name']}}
        (
        .clk(clk),
        .reset(rst[{{i}}]),
        .enable(enable[{{i}}]),
        .finished(finished[{{i}}]),
        .in_data_memory_out(data_read[{{i}}]),
        .in_data_memory_address(data_read_address[{{i}}]),
        .in_data_memory_read_enable(data_read_en[{{i}}]),
        .weights_memory_out(data_weight_{{i}}),
        .weights_memory_address(data_weight_address_{{i}}),
        .weights_memory_read_enable(data_weight_en_{{i}}),
        .out_data_memory_in(data_write[{{i}}]),
        .out_data_memory_address(data_write_address[{{i}}]),
        .out_data_memory_write_enable(data_write_we[{{i}}])
        );
    CASCADED_ROM
      #(
      .LEN({{L["rom_len"]}}),
      .DATA_WIDTH({{L['parallelism']}}*{{L['weight_bw']}}),
      .init_file_name_format("{{L['rom_file_format']}}"),
      .LATENCY({{rom_latency}}),
      .USE_SLEEP({{(L["rom_type"] != sleep_off) | int}}),
      .MEMO_TYPE("{{L["rom_type"]}}")
      )
      rom_{{L["name"]}}
        (
        .clka(clk),
        .sleep(sleep[{{i}}]),
        .douta(data_weight_{{i}}),
        .addra(data_weight_address_{{i}}),
        .ena(data_weight_en_{{i}})
        );
    {% elif L["type"] == "DWConv2d" -%}
    wire [{{L['weight_bw']}}-1:0] data_weight_{{i}};
    wire [31:0] data_weight_address_{{i}};
    wire data_weight_en_{{i}};
    
    DepthwiseConv2dUnit#(
        .IN_WIDTH({{L["width"]}}),
        .IN_HEIGHT({{L["height"]}}),
        .IN_CHANNELS({{L["ch_in"]}}),
        .CHANNEL_MUL({{L["ch_mul"]}}),
        .PADDING_W({{L["padding_w"]}}),
        .PADDING_H({{L["padding_h"]}}),
        .USE_BIAS({{L["use_bias"]}}),
        .USE_BN({{L["use_bn"]}}),
        .USE_RELU({{L["use_relu"]}}),
        .GROUPS({{L["groups"]}}),
        .IN_DATA_BIT_WIDTH({{L["in_bw"]}}),
        .IN_DATA_INT_WIDTH({{L["in_int"]}}),
        .IN_DATA_SIGN({{L["in_s"]}}),
        .WEIGHT_DATA_BIT_WIDTH({{L["weight_bw"]}}),
        .WEIGHT_DATA_INT_WIDTH({{L["weight_int"]}}),
        .WEIGHT_DATA_SIGN({{L["weight_s"]}}),
        .BIAS_DATA_BIT_WIDTH({{L["bias_bw"]}}),
        .BIAS_DATA_INT_WIDTH({{L["bias_int"]}}),
        .BIAS_DATA_SIGN({{L["bias_s"]}}),
        .INTER_DATA_BIT_WIDTH({{L["inter_bw"]}}),
        .INTER_DATA_INT_WIDTH({{L["inter_int"]}}),
        .INTER_DATA_SIGN({{L["inter_s"]}}),
        .BN_W_DATA_BIT_WIDTH({{L["bn_weight_bw"]}}),
        .BN_W_DATA_INT_WIDTH({{L["bn_weight_int"]}}),
        .BN_W_DATA_SIGN({{L["bn_weight_s"]}}),
        .BN_B_DATA_BIT_WIDTH({{L["bn_bias_bw"]}}),
        .BN_B_DATA_INT_WIDTH({{L["bn_bias_int"]}}),
        .BN_B_DATA_SIGN({{L["bn_bias_s"]}}),
        .OUT_DATA_BIT_WIDTH({{L["out_bw"]}}),
        .OUT_DATA_INT_WIDTH({{L["out_int"]}}),
        .OUT_DATA_SIGN({{L["out_s"]}}),
        .READ_MEMORY_LATENCY({{read_latency}}),
        .READ_WEIGHT_MEMORY_LATENCY({{rom_latency}}),
        .WRITE_MEMORY_LATENCY({{write_latency}})
        )
        {{L["name"]}}
        (
        .clk(clk),
        .reset(rst[{{i}}]),
        .enable(enable[{{i}}]),
        .finished(finished[{{i}}]),
        .in_data_memory_out(data_read[{{i}}]),
        .in_data_memory_address(data_read_address[{{i}}]),
        .in_data_memory_read_enable(data_read_en[{{i}}]),
        .weights_memory_out(data_weight_{{i}}),
        .weights_memory_address(data_weight_address_{{i}}),
        .weights_memory_read_enable(data_weight_en_{{i}}),
        .out_data_memory_in(data_write[{{i}}]),
        .out_data_memory_address(data_write_address[{{i}}]),
        .out_data_memory_write_enable(data_write_we[{{i}}])
        );
    CASCADED_ROM
      #(
      .LEN({{L["rom_len"]}}),
      .DATA_WIDTH({{L['weight_bw']}}),
      .init_file_name_format("{{L['rom_file_format']}}"),
      .LATENCY({{rom_latency}}),
      .USE_SLEEP({{(L["rom_type"] != sleep_off) | int}}),
      .MEMO_TYPE("{{L["rom_type"]}}")
      )
      rom_{{L["name"]}}
        (
        .clka(clk),
        .sleep(sleep[{{i}}]),
        .douta(data_weight_{{i}}),
        .addra(data_weight_address_{{i}}),
        .ena(data_weight_en_{{i}})
        );
    {% endif -%}
    wire [7:0] {{L['name']}}_r  = data_read[{{i}}];
    wire [31:0] {{L['name']}}_r_addr  = data_read_address[{{i}}];
    wire {{L['name']}}_r_en = data_read_en[{{i}}];
    wire [7:0] {{L['name']}}_w_byte_3  = data_write[{{i}}][(3+1)*8-1:3*8];
    wire [7:0] {{L['name']}}_w_byte_2  = data_write[{{i}}][(2+1)*8-1:2*8];
    wire [7:0] {{L['name']}}_w_byte_1  = data_write[{{i}}][(1+1)*8-1:1*8];
    wire [7:0] {{L['name']}}_w_byte_0  = data_write[{{i}}][(0+1)*8-1:0*8];
    wire [31:0] {{L['name']}}_w_addr  = data_write_address[{{i}}];
    wire {{L['name']}}_w_en  = data_write_we[{{i}}];

{%if DEBUG -%}
    WriteFile 
        #(
        .NAME("/media/michal/HDD_Linux_2/LittleNet/tmp/{{L["name"]}}")
        ) 
        {{L["name"]}}_file_writer
        (
        .clk(clk),
        .ena(enable[{{i}}]),
        .dina(data_write[{{i}}]),
        .addra(data_write_address[{{i}}]),
        .wea(data_write_we[{{i}}]),
        .state(state)
        );
{% endif -%}
{% endfor -%}

// RAMS
wire ena[{{ rams|len }}]; 
wire enb[{{ rams|len }}]; 
wire wea[{{ rams|len }}]; 
wire [31:0] addra[{{ rams|len }}]; 
wire [31:0] addrb[{{ rams|len }}];
wire [31:0] dina[{{ rams|len }}];
wire [7:0] doutb[{{ rams|len }}];

// ports read
wire [0:0] port_read_select[{{ (rams|len)}}];
wire [7:0] port_read_data[{{ (rams|len)*2}}];
wire [31:0] port_read_address[{{ (rams|len)*2}}];
wire port_read_en[{{ (rams|len)*2}}];

// ports write
wire [0:0] port_write_select[{{ (rams|len)}}];
wire [31:0] port_write_data[{{ (rams|len)*2}}];
wire [31:0] port_write_address[{{ (rams|len)*2}}];
wire port_write_en[{{ (rams|len)*2}}];
wire port_write_we[{{ (rams|len)*2}}];


{% for i, R in rams|enumerate %}
    CASCADED_RAM
        #(
        .BYTE_LEN({{R["BYTE_LEN"]}}),
        .WRITE_WIDTH({{32}}),
        .READ_WIDTH({{8}}),
        .BYTE_SIZE({{8}}),
        .WRITE_LATENCY({{write_latency-1}}),{#subtract latency of port mux#}
        .READ_LATENCY({{read_latency-1}}),
        .INIT_FILE_FORMAT("{{R["file_format"]}}")
        )
        {{R["name"]}}
        (
         .clka(clk),
         .ena(ena[{{i}}]),
         .dina(dina[{{i}}]),
         .addra(addra[{{i}}]),
         .wea(wea[{{i}}]),
         
         .clkb(clk),
         .enb(enb[{{i}}]),
         .doutb(doutb[{{i}}]),
         .addrb(addrb[{{i}}])
        );
    MemoryReaderSelectorUnit
        #(
        .BIT_WIDTH(8),
        .ADDRESS_BITS(32),
        .SOURCES(2)
        )
        reader_selector_{{R["name"]}}
        (
        .clk(clk),
        .select(port_read_select[{{i}}]),
        .data_in_address({port_read_address[{{2*i}}],port_read_address[{{2*i+1}}]}),
        .data_in_read_enable({port_read_en[{{2*i}}],port_read_en[{{2*i+1}}]}),
        
        .data_out_address(addrb[{{i}}]),
        .data_out_read_enable(enb[{{i}}])
        );
    assign port_read_data[{{2*i}}] = doutb[{{i}}];
    assign port_read_data[{{2*i+1}}] = doutb[{{i}}];
    
    // ram's port write activation
    assign ena[{{i}}] = port_write_en[{{2*i}}] | port_write_en[{{2*i+1}}];
    
    MemoryWriterSelectorUnit
        #(
        .BIT_WIDTH(32),
        .ADDRESS_BITS(32),
        .SOURCES(2)
        )
        writer_selector_{{R["name"]}}
        (
        .clk(clk),
        .select(port_write_select[{{i}}]),
        
        .data_in({port_write_data[{{2*i}}],port_write_data[{{2*i+1}}]}),
        .data_in_address({port_write_address[{{2*i}}],port_write_address[{{2*i+1}}]}),
        .data_in_write_enable({port_write_we[{{2*i}}],port_write_we[{{2*i+1}}]}),
        
        .data_out(dina[{{i}}]),
        .data_out_address(addra[{{i}}]),
        .data_out_write_enable(wea[{{i}}])
        );
{% endfor -%}

(* KEEP = "TRUE" *) reg enable_reg[4] = {1'b0,1'b0,1'b0,1'b0};
(* KEEP = "TRUE" *) reg sleep_reg[4] = {1'b0,1'b0,1'b0,1'b0};
(* KEEP = "TRUE" *) reg rst_reg[4] = {1'b1,1'b1,1'b1,1'b1};
wire [3:0] finished_step;

// registers assignments
{% for i,l in layers | enumerate -%}
{% set state_reg = i%4 -%}
// assign layer {{i}} to state {{state_reg}} 
assign enable[{{i}}] = enable_reg[{{state_reg}}];
assign rst[{{i}}] = rst_reg[{{state_reg}}];
assign sleep[{{i}}] = sleep_reg[{{state_reg}}];
{% endfor-%}

{%for i in range(4) -%}
// assign finished step
assign finished_step[{{i}}] = {{layers|
                                for_state(i)|
                                as_array_elems('finished[{}]')|
                                join_elems(' && ','1')}};
{%endfor-%}

// ram ports assignments
{% for i,r in rams|enumerate %}
    // RAM {{i}}
    {%set P0 = 2*i+0 -%}
    {%set P1 = 2*i+1 -%}
    {%set I = i  -%}
    {%set BLOCK = (I//2) -%}
    {%set BASE = BLOCK*4 -%}
    {%set ODD = I % 2 -%}
    {%set L0 = BASE+0+ODD -%}
    {%set L1 = BASE+2+ODD -%}
    {%set L2 = BASE+1+ODD -%}
    {%set L3 = BASE+3+ODD -%}
    {%set L0_valid = L0 >= 0 and L0+1 < (layers|len) -%}{#+1 - prevent last layer write to ram#}
    {%set L1_valid = L1 >= 0 and L1+1 < (layers|len) -%}
    {%set L2_valid = L2 >= 0 and L2 < (layers|len) -%}
    {%set L3_valid = L3 >= 0 and L3 < (layers|len) -%}
    // write select
    assign port_write_select[{{i}}] = {%if L1_valid-%}enable[{{L1}}]{%else-%}1'b0{%endif -%};
    {%for j, (P,L,v) in [(P0,L0, L0_valid),(P1,L1, L1_valid)]|enumerate -%}
    // {{j}}
    {%if v -%}
    assign port_write_data[{{P}}]= data_write[{{L}}];
    assign port_write_address[{{P}}] = data_write_address[{{L}}];
    assign port_write_we[{{P}}] = data_write_we[{{L}}];
    assign port_write_en[{{P}}] = enable[{{L}}];
    {%else -%}
    assign port_write_data[{{P}}]= 32'd0;
    assign port_write_address[{{P}}] = 32'd0;
    assign port_write_we[{{P}}] = 1'b0;
    assign port_write_en[{{P}}] = 1'b0;
    {%endif -%}
    {%endfor -%}
    // read select
    assign port_read_select[{{i}}] = {%if L3_valid-%}enable[{{L3}}]{%else-%}1'b0{%endif-%};
    {%for j, (P,L,v) in [(P0,L2, L2_valid),(P1,L3, L3_valid)]|enumerate -%}
    // {{j}}
    {%if v -%}
    assign data_read[{{L}}] = port_read_data[{{P}}];
    assign port_read_address[{{P}}] = data_read_address[{{L}}];
    assign port_read_en[{{P}}] = data_read_en[{{L}}];
    {%else -%}
    assign port_read_address[{{P}}] = 32'd0;
    assign port_read_en[{{P}}] = 1'b0;
    {%endif -%}
    {%endfor -%}
{%endfor%}


localparam AWAKENING_TIME = 17;
localparam AWAKENING_TIME_BITS = $clog2(AWAKENING_TIME);
(* KEEP = "TRUE" *) reg [AWAKENING_TIME_BITS-1:0] awakening_cntr = 0;
	
always @(posedge clk)
    begin
    if (reset)
        begin
        // GO TO RESET ALL STATE
        state <= 4'd13;
        end
    else
        begin
        case (state)
        // initial step
        4'd0:
            begin
            // turn off all resets
            rst_reg <= {1'b0,1'b0,1'b0,1'b0};
            // turn off all modules
            enable_reg <= {1'b0,1'b0,1'b0,1'b0};
            // put sleep all modules
            sleep_reg <= {1'b1,1'b1,1'b1,1'b1};
            // awake all rams
            awakening_cntr <= 0;
            // to first processing step
            state <= 4'd{{init_state}};
            end
            
        // first processing step
        4'd1:
            begin
            rst_reg[0] <= 1'b1;
            sleep_reg[0] <= 1'b0;
            // awakening of roms time
            if (awakening_cntr == AWAKENING_TIME-1)
                begin
                awakening_cntr <= 0;
                // go to enabling state
                state <= 4'd2;
                end
            else
                awakening_cntr <= awakening_cntr+1;
            end
        // turn off resets
        4'd2:
            begin
            // put to sleep prev state layers
            sleep_reg[3] <= 1'b1;
            // stop resetting
            rst_reg[0] <= 1'b0;
            // turn on layers
            enable_reg[0] <= 1'b1;
            // to working state
            state <= 4'd3;
            end
        4'd3:
            begin
            // turn off finished layers if finish work
            if ( finished_step[0])
                begin
                enable_reg[0] <= 1'b0;
                // next processing step
                state <= 4'd4;
                end
            end
            
        // second processing step
        4'd4:
            begin
            rst_reg[1] <= 1'b1;
            sleep_reg[1] <= 1'b0;
            // awakening of rams time
            if (awakening_cntr == AWAKENING_TIME-1)
                begin
                awakening_cntr <= 0;
                // go to enabling state
                state <= 4'd5;
                end
            else
                awakening_cntr <= awakening_cntr+1;
            end
        // turn off resets
        4'd5:
            begin
            // put sleep prev layers
            sleep_reg[0] <= 1'b1;
            // stop resetting
            rst_reg[1] <= 1'b0;
            // turn on layers
            enable_reg[1] <= 1'b1;
            // to working state
            state <= 4'd6;
            end
        4'd6:
            begin
            // turn off finished layers if finish work
            if ( finished_step[1])
                begin
                enable_reg[1] <= 1'b0;
                // next processing step
                state <= 4'd7;
                end
            end
        
        // third processing step
        4'd7:
            begin
            rst_reg[2] <= 1'b1;
            sleep_reg[2] <= 1'b0;
            // awakening of rams time
            if (awakening_cntr == AWAKENING_TIME-1)
                begin
                awakening_cntr <= 0;
                // go to enabling state
                state <= 4'd8;
                end
            else
                awakening_cntr <= awakening_cntr+1;
            end
        // turn off resets
        4'd8:
            begin
            // put to sleep prev layers
            sleep_reg[1] <= 1'b1;
            // stop resetting
            rst_reg[2] <= 1'b0;
            // turn on
            enable_reg[2] <= 1'b1;
            // to working state
            state <= 4'd9;
            end
        4'd9:
            begin
            // turn off finished layers if finish work
            if (finished_step[2])
                begin
                enable_reg[2] <= 1'b0;
                // next processing step
                state <= 4'd10;
                end
            end
        
        // fourth processing step
        4'd10:
            begin
            rst_reg[3] <= 1'b1;
            sleep_reg[3] <= 1'b0;
            // awakening of roms time
            if (awakening_cntr == AWAKENING_TIME-1)
                begin
                awakening_cntr <= 0;
                // go to enabling state
                state <= 4'd11;
                end
            else
                awakening_cntr <= awakening_cntr+1;
            end
        // turn off resets
        4'd11:
            begin
            // put to sleep prev layers
            sleep_reg[2] <= 1'b1;
            // stop resetting
            rst_reg[3] <= 1'b0;
            // turn on
            enable_reg[3] <= 1'b1;
            // to working state
            state <= 4'd12;
            end
        4'd12:
            begin
            // turn off finished layers if finish work
            if (finished_step[3])
                begin
                enable_reg[3] <= 1'b0;
                // next processing step
                state <= 4'd1;
                // OR reset all
                // state <= 4'd13;
                end
            end
        // RESET STEP
        4'd13:
            begin
            // RESET ALL
            // turn on all resets
            rst_reg <= {1'b1,1'b1,1'b1,1'b1};
            // disable all modules
            enable_reg <= {1'b0,1'b0,1'b0,1'b0};
            
            awakening_cntr <= 0;
            // to init step
            state <= 4'd0;
            end
        default:
            begin
            // to RESET ALL STEP
            state <= 4'd13;
            end
        endcase
        end
    end
endmodule